/* 
 * Copyright 2014 Kurt Faulknerloser
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.bbsync.webservice.client.coursemembership;

import java.io.Serializable;
import java.util.ArrayList;

import org.bbsync.webservice.client.abstracts.AbstractCourseMembership;
import org.bbsync.webservice.client.generated.CourseMembershipWSStub.CourseMembershipVO;
import org.bbsync.webservice.client.generated.CourseMembershipWSStub.MembershipFilter;

public class BbCourseMembership extends AbstractCourseMembership {
    private static final long serialVersionUID = 5555000000003333L;
    
	///////////////////////////////////////////////////////////////////////////
	//  Constructors  /////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
    public BbCourseMembership() {
        _cmvo = new CourseMembershipVO();
    }

    private BbCourseMembership(CourseMembershipVO cmvo) {
        _cmvo = cmvo;
    }
    
	///////////////////////////////////////////////////////////////////////////
	//  Required ClientWebService Methods  ////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
    /**
     * Creates this Course Membership in Blackboard. The following fields must 
     * be set prior to calling persist():
     *  - Course ID: set the ID of the Course that will contain the User. This 
     *               parameter can be null if invoked by a System 
     *               Administrator. Otherwise, Course ID is required. The 
     *               Course ID should be generated by Blackboard, in the form 
     *               "_nnn_1" where nnn is an integer.
     *  - User ID: The ID of the user that will be enrolled in the Course. This 
     *             ID should be generated by Blackboard, in the form "_nnn_1" 
     *             where nnn is an integer.
     *  - Role ID: The ID of the User's Role in the Course. Role IDs can be 
     *             obtained via BbCourseMembershipRole. You can also see 
     *             "Course/Organization Roles" in System Admin Panel for more
     *             information about Course/Organization Roles.
     *  - Available: Availability must be set to true in order to create a 
     *               Course Membership. 
     * @Return Returns a String representing the CourseMembership ID, or null 
     *         if the persist() was not successful.
     */    
	public Serializable persist() {
		String[] result = super.saveCourseMembership(getCourseId(), new CourseMembershipVO[]{_cmvo});
		if(result==null || result.length==0) return null;
		return result[0];
	}

	/** 
	 * This method will retrieve a single membership from Blackboard. In order 
	 * to use this method you must set the ID value using the CourseMembership 
	 * ID value provided by Blackboard.  Alternatively, this method will 
	 * retrieve a single CourseMembership provided that the User ID and Course 
	 * ID fields have been set.
	 */
	/**
     * This method will load a BbCourseMembership object. In order to use this 
     * method you must set the ID value using the CourseMembership ID value.  
     * Alternatively, this method will retrieve a single CourseMembership 
     * provided that the User ID and Course ID fields have been set.
     *  - Course ID: this CourseMembership's Course ID. This parameter can be 
     *               null if the CourseMembership ID field has been set and 
     *               this method is invoked by a System Administrator. 
     *               Otherwise, Course ID is required. The Course ID should be 
     *               generated by Blackboard, in the form "_nnn_1" where nnn is
     *               an integer.
     *  - Course Membership ID: the ID representing the CourseMembership object
     * 						    to be retrieved from Blackboard.  The ID should 
     *                          be generated by Blackboard, in the form 
     *                          "_nnn_1" where nnn is an integer.
     *  - User ID:  If not attempting to retrieve() by Course Membership ID, 
     *              User ID is set along with Course ID to retrieve a Course
     *              Membership ID. The ID should be generated by Blackboard, in
     *              the form "_nnn_1" where nnn is an integer.
     * @Return Returns a BbCourseMembership, or null if the retrieve() was not successful.
     */
	public Object retrieve() {
		BbCourseMembership[] result = null;
		if(getId() != null){
			result = getCourseMembershipsByIds(getCourseId(), new String[]{getId()});
			if(result==null || result.length==0) return null;
			return result[0];
		}
		if(getUserId()!=null && getCourseId()!=null){
			result = getCourseMembershipsByCourseIdAndUserIds(getCourseId(), new String[]{getUserId()});
			if(result==null || result.length==0) return null;
			return result[0];
		}
		return null;
	}
	
    /**
     * This method allows this Course Membership record to be deleted (i.e.
     * remove a user from a Course).  The following fields must be set prior to
     * calling delete():
     * 
     * Course ID: This CourseMembership's Course ID This parameter can be null 
     *            if invoked by a System Administrator. Otherwise, Course ID is
     *            required. The Course ID should be generated by Blackboard, in
     *            the form "_nnn_1" where nnn is an integer.
     * CourseMembership ID: This CourseMembership's ID. The Course Membership 
     *                      ID should be generated by Blackboard, in the form 
     *                      "_nnn_1" where nnn is an integer.
     * @return Returns true if the Course Membership was successfully deleted.  
     *         Otherwise returns false.
     */
	public boolean delete() {
		String[] result = super.deleteCourseMembership(getCourseId(), new String[]{getId()});
		if(result!=null && result.length==1)return true;
		return false;
	}
	
	///////////////////////////////////////////////////////////////////////////
	//  Implemented ProxyTool Methods  ////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////    
	/**
	 * Sets the client version to version 1 and returns an appropriate session.
	 * 
	 * @return Returns true to indicate that the session has been initialized 
     *         for the CourseMembership web service.
	 */
	public boolean	initializeCourseMembershipWS(){
		return super.initializeCourseMembershipWS(true);
	}
    
    /**
     * This method allows multiple BbCourseMembership records to be added to a 
     * Course (i.e. add Course Users to Courses). If the Role of the user
     * invoking this method is *System Administrator* then the course_id 
     * parameter can be null, allowing for Course Memberships from different 
     * Courses. Otherwise, the course_id is required and all Course Memberships 
     * must be associated with the specified Course.
     * 
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to save.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param memberships - an array BbCourseMemberships to save
     * 
     * @return Returns an array of successfully saved CourseMembership IDs.
     */
	public String[] saveCourseMembership(String course_id, BbCourseMembership[] memberships){
		if(memberships==null) return null;
		CourseMembershipVO[] membership_vos = bbCmArray2_cmvoArray(memberships);
		return super.saveCourseMembership(course_id, membership_vos);
	}
		
	/**
     * This method allows Course Membership objects to be loaded based on 
     * CourseMembership IDs. This method will return both Active and Inactive 
     * records.  If the Role of the user invoking this method is 
     * *System Administrator* then the course_id parameter can be null, 
     * allowing for Course Memberships from different Courses. Otherwise, the 
     * course_id is required and all requested Course Memberships 
     * (course_membership_ids) must be associated with the specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param course_membership_ids - an array of Course Membership IDs 
     * 								  representing the GroupMembership objects
     * 								  to be retrieved from Blackboard.  The ids 
     *                                should be generated by Blackboard, in the 
     *                                form "_nnn_1" where nnn is an integer.
     * @return Returns an array of BbCourseMembership objects.
     */	
	public BbCourseMembership[] getCourseMembershipsByIds(String course_id, String[] cm_ids){
		MembershipFilter filter = new MembershipFilter();
		filter.setFilterType(FILTER_TYPE_BY_ID);
		filter.setCourseMembershipIds(cm_ids);
		CourseMembershipVO[] result = super.getCourseMembership(course_id, filter);
		return _cmvoArray2bbCmArray2(result);
	}

	/**
     * This method allows Course Membership objects to be loaded based on 
     * Course IDs. This method will return both Active and Inactive records.  
     * If the Role of the user invoking this method is *System Administrator*
     * then the course_id parameter can be null, allowing for Course 
     * Memberships from different Courses. Otherwise, the course_id is required
     * and all requested Course Memberships (course_ids) must be associated 
     * with the specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param course_ids - an array of Course IDs from which the the 
     *                     CourseMembership objects will be retrieved.  This 
     *                     is a required parameter, even if there is only 
     *                     one Course ID (the same value as course_id).  The 
     *                     IDs should be generated by Blackboard, in the form 
     *                     "_nnn_1" where nnn is an integer.
     * @return Returns an array of BbCourseMembership objects representing all
     *         of the Course Memberships associated with the specified 
     *         Course(s). One Course can return many Course Memberships.
     */
	public BbCourseMembership[] getCourseMembershipsByCourseIds(String course_id, String[] course_ids){
		MembershipFilter filter = new MembershipFilter();
		filter.setFilterType(FILTER_TYPE_BY_CRS_ID);
		filter.setCourseIds(course_ids);
		CourseMembershipVO[] result = super.getCourseMembership(course_id, filter);
		return _cmvoArray2bbCmArray2(result);
	}

	/**
     * This method allows Course Membership objects to be loaded based on User
     * IDs. This method will return both Active and Inactive records.  If the 
     * Role of the user invoking this method is *System Administrator* then the
     * course_id parameter can be null, allowing for Course Memberships from 
     * different Courses. Otherwise, the course_id is required and all 
     * requested Course Memberships (user_ids) must be associated with the 
     * specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param user_ids - an array of User IDs representing the Users enrolled
     *                   in a Course.  The IDs should be generated by 
     *                   Blackboard, in the form "_nnn_1" where nnn is an 
     *                   integer.
     * @return Returns an array of BbCourseMembership objects representing all
     *         of the Course Memberships associated with the specified User(s).
     *         One User can be a member of many Courses.
     */	
	public BbCourseMembership[] getCourseMembershipsByUserIds(String course_id, String[] user_ids){
		MembershipFilter filter = new MembershipFilter();
		filter.setFilterType(FILTER_TYPE_BY_USER_ID);
		filter.setUserIds(user_ids);
		CourseMembershipVO[] result = super.getCourseMembership(course_id, filter);
		return _cmvoArray2bbCmArray2(result);
	}

	/**
     * This method allows Course Membership objects to be loaded based on User
     * IDs, but limited to the Course specified by the course_id  parameter. 
     * For this method, the course_id is required and all requested Course 
     * Memberships (user_ids) must be associated with the specified Course. 
     * This method will return both Active and Inactive records.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to load. The course_id should be 
     *                    generated by Blackboard, in the form "_nnn_1" where 
     *                    nnn is an integer.
     * @param user_ids - an array of User IDs representing the Users enrolled
     *                   in a Course.  The IDs should be generated by 
     *                   Blackboard, in the form "_nnn_1" where nnn is an 
     *                   integer.
     * @return Returns an array of BbCourseMembership objects representing all
     *         of the Course Memberships associated with the specified User(s)
     *         and the specified Course.
     */	
	public BbCourseMembership[] getCourseMembershipsByCourseIdAndUserIds(String course_id, String[] user_ids){
		MembershipFilter filter = new MembershipFilter();
		filter.setFilterType(FILTER_TYPE_BY_CRS_ID_AND_USER_ID);
		filter.setUserIds(user_ids);
		filter.setCourseIds(new String[]{course_id});
		CourseMembershipVO[] result = super.getCourseMembership(course_id, filter);
		return _cmvoArray2bbCmArray2(result);
	}

	/**
     * This method allows Course Membership objects to be loaded based on 
     * Course Roles and limited to the Course specified by the course_id  
     * parameter. For this method, the course_id is required and all requested 
     * Course Memberships (role_ids) must be associated with the specified 
     * Course. This method will return both Active and Inactive records.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to load. The course_id should be 
     *                    generated by Blackboard, in the form "_nnn_1" where 
     *                    nnn is an integer.
     * @param role_ids - an array of Role IDs representing the types of Users 
     *                   enrolled in a Course. Role IDs can be obtained via 
     *                   BbCourseMembershipRole. You can also see 
     *                   "Course/Organization Roles" in System Admin Panel for 
     *                   more information about Course/Organization Roles.
     * @return Returns an array of BbCourseMembership objects representing all
     *         of the Course Memberships associated with the specified Role(s)
     *         and the specified Course.
     */	
	public BbCourseMembership[] getCourseMembershipsByCourseIdAndRoleId(String course_id, String[] role_ids){
		MembershipFilter filter = new MembershipFilter();
		filter.setFilterType(FILTER_TYPE_BY_CRS_ID_AND_ROLE_ID);
		filter.setRoleIds(role_ids);
		filter.setCourseIds(new String[]{course_id});
		CourseMembershipVO[] result = super.getCourseMembership(course_id, filter);
		return _cmvoArray2bbCmArray2(result);
	}
	
	/**
     * This method allows specific Course Membership records to be deleted 
     * (i.e. remove Users from a Course). If the Role of the user invoking this
     * method is *System Administrator* then the course_id parameter can be 
     * null, allowing for Course Memberships from different Courses. Otherwise, 
     * the course_id is required and all Course Memberships must be associated 
     * with the specified Course.
     * 
     * @param course_id - the ID of the course that is associated with the 
     *                    CourseMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param course_membership_ids - An array of CourseMembership IDs to be 
     *                               deleted.  The course_membership_ids should 
     *                               be generated by Blackboard, in the form 
     *                               "_nnn_1" where nnn is an integer.
     * @return Returns an array of course_membership_ids that were successfully 
     *         deleted.
     */
	public String[] deleteCourseMemberships(String course_id, String[] course_membership_ids){
		return super.deleteCourseMembership(course_id, course_membership_ids);
	}
	
	///////////////////////////////////////////////////////////////////////////
	//  Local Methods  ////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
	/**
	 * @return
	 */
	public String getCourseId(){
		return _cmvo.getCourseId();
	}
	
	/**
	 * @param courseId
	 */
	public void	setCourseId(String courseId){
		_cmvo.setCourseId(courseId);
	}
	
	private CourseMembershipVO getVO(){
		return _cmvo;
	}
	
	private CourseMembershipVO[] bbCmArray2_cmvoArray(BbCourseMembership[] memberships){
		if(memberships==null || memberships.length==0)return null;
		ArrayList<CourseMembershipVO> membership_vos = new ArrayList<CourseMembershipVO>();
		for(BbCourseMembership bbcm:memberships){
			membership_vos.add(bbcm.getVO());
		}
		return membership_vos.toArray(new CourseMembershipVO[]{});
	}
	
	private BbCourseMembership[] _cmvoArray2bbCmArray2(CourseMembershipVO[] memberships){
		if(memberships==null)return null;
		ArrayList<BbCourseMembership> bbcms = new ArrayList<BbCourseMembership>();
		for(CourseMembershipVO _cmvo:memberships){
			BbCourseMembership membership = new BbCourseMembership(_cmvo);
			bbcms.add(membership);
		}
		return bbcms.toArray(new BbCourseMembership[]{});
	}	
}
