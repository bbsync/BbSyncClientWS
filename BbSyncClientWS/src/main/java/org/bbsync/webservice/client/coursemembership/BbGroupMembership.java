/* 
 * Copyright 2014 Kurt Faulknerloser
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.bbsync.webservice.client.coursemembership;

import java.io.Serializable;
import java.util.ArrayList;

import org.bbsync.webservice.client.generated.CourseMembershipWSStub.GroupMembershipVO;
import org.bbsync.webservice.client.generated.CourseMembershipWSStub.MembershipFilter;
import org.bbsync.webservice.client.generated.CourseMembershipWSStub.VersionVO;
import org.bbsync.webservice.client.proxytool.CourseMembershipProxyTool;

public class BbGroupMembership extends CourseMembershipProxyTool {
    private static final long serialVersionUID = 5555000000005555L;
    private GroupMembershipVO _gmvo = null;
    private String _course_id = null;
    //From Blackboard CourseMembershipWS API
  	private static final int FILTER_TYPE_BY_ID                 = 1;
  	private static final int FILTER_TYPE_BY_CRS_ID             = 2;
  	private static final int FILTER_TYPE_BY_GRP_MEMBERSHIP_ID  = 3;
  	private static final int FILTER_TYPE_BY_GROUP_ID           = 4;
    
	///////////////////////////////////////////////////////////////////////////
	//  Constructors  /////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
    public BbGroupMembership() {
        _gmvo = new GroupMembershipVO();
    }

    private BbGroupMembership(GroupMembershipVO _cmvo) {
        _gmvo = _cmvo;
    }
    
	///////////////////////////////////////////////////////////////////////////
	//  Required ClientWebService Methods  ////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
    /**
     * Creates this Group Membership in Blackboard. The following fields must 
     * be set prior to calling persist():
     *  - Course ID: set the ID of the Course that contains the Group. This 
     *               parameter can be null if invoked by a System 
     *               Administrator. Otherwise, Course ID is required. The 
     *               Course ID should be generated by Blackboard, in the form 
     *               "_nnn_1" where nnn is an integer.
     *  - Course Membership ID: The ID of the Course Membership related to the
     *                          user that will be enrolled in the group. This 
     *               			ID should be generated by Blackboard, in the 
     *               			form "_nnn_1" where nnn is an integer.
     *  - Group ID: the ID of the Group that this membership will be associated 
     *              with. The Group ID should be generated by Blackboard, in 
     *              the form "_nnn_1" where nnn is an integer.
     * @Return Returns a String representing the GroupMembership ID, or null if
     *         the persist() was not successful.
     */    
	public Serializable persist() {
		String[] result = super.saveGroupMembership(getCourseId(), new GroupMembershipVO[]{_gmvo});
		if(result==null || result.length==0) return null;
		return result[0];
	}

	/**
     * This method will load a BbGroupMembership object. The following fields 
     * must be set prior to calling retrieve():
     *  - Course ID: set the ID of the Course that contains the Group. This 
     *               parameter can be null if invoked by a System 
     *               Administrator. Otherwise, Course ID is required. The 
     *               Course ID should be generated by Blackboard, in the form 
     *               "_nnn_1" where nnn is an integer.
     *  - Group Membership ID: the ID representing the GroupMembership object
     * 						   to be retrieved from Blackboard.  The ID should 
     *                         be generated by Blackboard, in the form "_nnn_1"
     *                         where nnn is an integer.
     * @Return Returns a BbGroupMembership, or null if the retrieve() was not 
     *         successful.
     */
	public Object retrieve() {
		BbGroupMembership[] memberships = getGroupMembershipsByIds(getCourseId(), new String[]{getGroupMembershipId()});
		 if(memberships!=null && memberships.length==1) return memberships[0];
		 return null;
	}
	
    /**
     * This method allows this Group Membership record to be deleted (i.e.
     * remove a User from a Course Group).  The following fields must be set 
     * prior to calling delete():
     * 
     * Course ID: the ID of the course that is associated with this 
     *            GroupMembership.  This parameter can be null if invoked by a
     *            System Administrator. Otherwise, Course ID is required. The 
     *            Course ID should be generated by Blackboard, in the form 
     *            "_nnn_1" where nnn is an integer.
     * Group Membership ID: this GroupMembership's ID. The Group Membership ID
     *                      should be generated by Blackboard, in the form 
     *                      "_nnn_1" where nnn is an integer.
     * @return Returns true if the Group Membership was successfully deleted.  
     *         Otherwise returns false.
     */
	public boolean delete() {
		String[] result = super.deleteGroupMembership(getCourseId(), new String[]{getGroupMembershipId()});
		if(result!=null && result.length==1)return true;
		return false;
	}
	
	///////////////////////////////////////////////////////////////////////////
	//  Implemented ProxyTool Methods  ////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////    
    /**
     * @return Returns the current version (Long) of this web service on
     *         the server.
     */
    public Long getServerVersion(){
    	VersionVO version = null;
    	version = super.getServerVersion(version);
    	return version.getVersion();
    }
    	
	/**
	 * Sets the client version to version 1 and returns an appropriate session.
	 * 
	 * @return Returns true to indicate that the session has been initialized 
     *         for the CourseMembership web service.
	 */
	public boolean	initializeCourseMembershipWS(){
		return super.initializeCourseMembershipWS(true);
	}
	
	/**
     * This method allows specific Group Membership records to be deleted (i.e.
     * remove Users from a Course Group). If the Role of the user invoking this
     * method is *System Administrator* then the course_id parameter can be 
     * null, allowing for Group Memberships from different Courses. Otherwise, 
     * the course_id is required and all Group Memberships must be associated 
     * with the specified Course.
     * 
     * @param course_id - the ID of the course that is associated with the 
     *                    GroupMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param group_membership_ids - An array of GroupMembership IDs to be 
     *                               deleted.  The group_membership_ids should 
     *                               be generated by Blackboard, in the form 
     *                               "_nnn_1" where nnn is an integer.
     * @return Returns an array of group_membership_ids that were successfully 
     *         deleted.
     */
	public String[]	deleteGroupMemberships(String course_id, String[] group_membership_ids){
		return super.deleteGroupMembership(course_id, group_membership_ids);
	}
		
	/**
     * This method allows Group Membership objects to be loaded based on 
     * GroupMembership IDs. This method will return both Active and Inactive 
     * records.  If the Role of the user invoking this method is 
     * *System Administrator* then the course_id parameter can be null, 
     * allowing for Group Memberships from different Courses. Otherwise, the 
     * course_id is required and all requested Group Memberships 
     * (group_membership_ids) must be associated with the specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    GroupMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param group_membership_ids - an array of Group Membership IDs 
     * 								 representing the GroupMembership objects
     * 								 to be retrieved from Blackboard.  The ids 
     *                               should be generated by Blackboard, in the 
     *                               form "_nnn_1" where nnn is an integer.
     * @return Returns an array of BbGroupMembership objects.
     */
    public BbGroupMembership[] getGroupMembershipsByIds(String course_id, String[] group_membership_ids){
    	MembershipFilter filter = new MembershipFilter();
    	filter.setFilterType(FILTER_TYPE_BY_ID);
    	filter.setGroupMembershipIds(group_membership_ids);
    	GroupMembershipVO[] gmvos = super.getGroupMembership(course_id, filter);
    	return convert_GroupMembershipVOArray_to_BbGroupMembershipArray(gmvos);
    }
    
	/**
     * This method allows Group Membership objects to be loaded based on Course
     * IDs. This method will return both Active and Inactive records.  If the 
     * Role of the user invoking this method is *System Administrator* then the 
     * course_id parameter can be null, allowing for Group Memberships from 
     * different Courses. Otherwise, the course_id is required and all 
     * requested Group Memberships (course_ids) must be associated with the 
     * specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    GroupMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param course_ids - an array of Course IDs from which the the 
     *                     GroupMembership objects will be retrieved.  This 
     *                     is a required parameter, even if there is only 
     *                     one Course ID (the same value as course_id).  The 
     *                     ids should be generated by Blackboard, in the form 
     *                     "_nnn_1" where nnn is an integer.
     * @return Returns an array of BbGroupMembership objects representing all
     *         of the Group Memberships associated with the specified 
     *         Course(s). One Course can return many Group Memberships.
     */
    public BbGroupMembership[] getGroupMembershipsByCourseIds(String course_id, String[] course_ids){
    	MembershipFilter filter = new MembershipFilter();
    	filter.setFilterType(FILTER_TYPE_BY_CRS_ID);
    	filter.setCourseIds(course_ids);
    	GroupMembershipVO[] gmvos = super.getGroupMembership(course_id, filter);
    	return convert_GroupMembershipVOArray_to_BbGroupMembershipArray(gmvos);
    }
    
	/**
     * This method allows Group Membership objects to be loaded based on 
     * CourseMembership IDs. This method will return both Active and Inactive 
     * records.  If the Role of the user invoking this method is 
     * *System Administrator* then the course_id parameter can be null, 
     * allowing for Group Memberships from different Courses. Otherwise, the 
     * course_id is required and all requested Group Memberships 
     * (course_membership_ids) must be associated with the specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    GroupMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param course_membership_ids - an array of Course Membership IDs 
     * 								  representing the Users associated with a 
     *                                Course.  The ids should be generated by 
     *                                Blackboard, in the form "_nnn_1" where 
     *                                nnn is an integer.
     * @return Returns an array of BbGroupMembership objects representing all
     *         of the Group Memberships associated with the specified Course
     *         Memberships(s).  One Course Membership (aka enrolled user) can
     *         be associated with many Groups.
     */
    public BbGroupMembership[] getGroupMembershipsByCourseMembershipIds(String course_id, String[] course_membership_ids){
    	MembershipFilter filter = new MembershipFilter();
    	filter.setFilterType(FILTER_TYPE_BY_GRP_MEMBERSHIP_ID);
    	filter.setCourseIds(new String[]{course_id});
    	filter.setCourseMembershipIds(course_membership_ids);
    	GroupMembershipVO[] gmvos = super.getGroupMembership(course_id, filter);
    	return convert_GroupMembershipVOArray_to_BbGroupMembershipArray(gmvos);
    }
    
	/**
     * This method allows Group Membership objects to be loaded based on 
     * Group IDs. This method will return both Active and Inactive records. If
     * the Role of the user invoking this method is *System Administrator* then
     * the course_id parameter can be null, allowing for Group Memberships from 
     * different Courses. Otherwise, the course_id is required and all 
     * requested Group Memberships (group_ids) must be associated with the 
     * specified Course.
     *  
     * @param course_id - the ID of the course that is associated with the 
     *                    GroupMemberships to load.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param group_ids - an array of Group IDs representing the Groups 
     * 					  contained within a Course.  The ids should be 
     *                    generated by Blackboard, in the form "_nnn_1" where 
     *                    nnn is an integer.
     * @return Returns an array of BbGroupMembership objects representing all 
     *         of the Group Memberships associated with the specified Group(s).
     *         One Group can have many Group Memberships. 
     */
    public BbGroupMembership[] getGroupMembershipByGroupIds(String course_id, String[] group_ids){
    	MembershipFilter filter = new MembershipFilter();
    	filter.setFilterType(FILTER_TYPE_BY_GROUP_ID);
    	filter.setCourseIds(new String[]{course_id});
    	filter.setGroupIds(group_ids);
    	GroupMembershipVO[] gmvos = super.getGroupMembership(course_id, filter);
    	return convert_GroupMembershipVOArray_to_BbGroupMembershipArray(gmvos);
    }
    
    /**
     * This method allows multiple BbGroupMembership records to be added to a 
     * Course (i.e. add Course Users to Course Groups). If the Role of the user
     * invoking this method is *System Administrator* then the course_id 
     * parameter can be null, allowing for Group Memberships from different 
     * Courses. Otherwise, the course_id is required and all Group Memberships 
     * must be associated with the specified Course.
     * 
     * @param course_id - the ID of the course that is associated with the 
     *                    GroupMemberships to save.  This parameter can be 
     *                    null if invoked by a System Administrator.  
     *                    Otherwise, course_id is required. The course_id 
     *                    should be generated by Blackboard, in the form 
     *                    "_nnn_1" where nnn is an integer.
     * @param memberships - an array BbGroupMemberships to save
     * 
     * @return Returns an array of successfully saved GroupMembership IDs.
     */
    public String[] saveGroupMembership(String course_id, BbGroupMembership[] memberships){
    	GroupMembershipVO[] gmvos = convert_BbGroupMembershipArray_to_GroupMembershipVOArray(memberships);
    	return super.saveGroupMembership(course_id, gmvos);
    }

	///////////////////////////////////////////////////////////////////////////
	//  Local Methods  ////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////
    /**
     * @return Returns the ID of the Course associated with this 
     *         GroupMembership.
     */
    public String getCourseId(){
		return _course_id;
	}
    
    /**
     * Sets the Course ID associated with this GroupMembership.
     * 
     * @param course_id - the ID of the Course associated with this 
     *                    GroupMembership
     */
	public void setCourseId(String course_id){
		_course_id = course_id;
	}
    
    /**
	 * @return Returns the group Id associated with this GroupMembership.
	 */
	public String getGroupMembershipId(){
		return _gmvo.getGroupMembershipId();
	}

	/**
	 * Sets the GroupID value for this GroupMembership.
	 * 
	 * @param group_membership_id - the Group ID value to use for this 
	 *                              GroupMembership.
	 */
	public void setGroupMembershipId(String group_membership_id){
		_gmvo.setGroupMembershipId(group_membership_id);
	}

	/**
	 * @return Returns the CourseMembership ID associated with this 
	 *         GroupMembership.
	 */
	public String getCourseMembershipId(){
		return _gmvo.getCourseMembershipId();
	}

	/**
	 * Sets the CourseMembership ID value for this GroupMembership.
	 * 
	 * @param course_membership_id - the CourseMembership ID value to use for 
	 *                               this GroupMembership 
	 */
	public void setCourseMembershipId(String course_membership_id){
		_gmvo.setCourseMembershipId(course_membership_id);
	}

	/**
	 * @return Returns the Group ID associated with this GroupMembership.
	 */
	public String getGroupId(){
		return _gmvo.getGroupId();
	}

	/**
	 * Sets the Group ID value for this GroupMembership.
	 * 
	 * @param group_id - the Group ID value to use for this GroupMembership.
	 */
	public void setGroupId(String group_id){
		_gmvo.setGroupId(group_id);
	}

	/**
	 * @return Returns the expansion data.
	 */
	public String[] getExpansionData(){
		return _gmvo.getExpansionData();
	}

	/**
	 * Expansion data is currently ignored. In future versions it may be used 
	 * to add additional attributes without breaking the wsdl contract.
	 * 
	 * @param expansion_data
	 */
	public void setExpansionData(String[] expansion_data){
		_gmvo.setExpansionData(expansion_data);
	}
	
	private GroupMembershipVO getVO(){
		return _gmvo;
	}
	
	private GroupMembershipVO[] convert_BbGroupMembershipArray_to_GroupMembershipVOArray(BbGroupMembership[] memberships){
		if(memberships==null || memberships.length==0)return null;
		ArrayList<GroupMembershipVO> membership_vos = new ArrayList<GroupMembershipVO>();
		for(BbGroupMembership bbcm:memberships){
			membership_vos.add(bbcm.getVO());
		}
		return membership_vos.toArray(new GroupMembershipVO[]{});
	}
	
	private BbGroupMembership[] convert_GroupMembershipVOArray_to_BbGroupMembershipArray(GroupMembershipVO[] memberships){
		if(memberships==null)return null;
		ArrayList<BbGroupMembership> bbgms = new ArrayList<BbGroupMembership>();
		for(GroupMembershipVO gmvo:memberships){
			BbGroupMembership membership = new BbGroupMembership(gmvo);
			bbgms.add(membership);
		}
		return bbgms.toArray(new BbGroupMembership[]{});
	}
}
